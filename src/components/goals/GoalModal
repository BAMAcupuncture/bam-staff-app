import React, { useState } from 'react';
import { Goal } from '../../types';
import { firestore } from '../../config/firebase';
import { doc, updateDoc, addDoc, collection, serverTimestamp } from 'firebase/firestore';
import { format } from 'date-fns';

interface GoalModalProps {
  goal: Goal | null;
  onClose: () => void;
}

const GoalModal: React.FC<GoalModalProps> = ({ goal, onClose }) => {
  const [formData, setFormData] = useState({
    title: goal?.title || '',
    description: goal?.description || '',
    type: goal?.type || 'monthly',
    targetDate: goal?.targetDate ? format(goal.targetDate, 'yyyy-MM-dd') : '',
    progress: goal?.progress || 0,
  });
  const isEditing = goal !== null;

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: name === 'progress' ? Number(value) : value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const dataToSave = {
        ...formData,
        targetDate: new Date(formData.targetDate),
        progress: Number(formData.progress),
    };

    try {
        if (isEditing) {
            const goalRef = doc(firestore, 'goals', goal.id);
            await updateDoc(goalRef, dataToSave);
        } else {
            await addDoc(collection(firestore, 'goals'), {
                ...dataToSave,
                status: 'active',
                createdDate: serverTimestamp(),
            });
        }
        onClose();
    } catch (error) {
        console.error("Error saving goal:", error);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center p-4">
      <div className="bg-white rounded-lg shadow-xl p-8 w-full max-w-lg">
        <h2 className="text-2xl font-bold mb-6">{isEditing ? 'Edit Goal' : 'Create New Goal'}</h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          <input name="title" value={formData.title} onChange={handleChange} placeholder="Goal Title" required className="block w-full px-3 py-2 border border-gray-300 rounded-md"/>
          <textarea name="description" value={formData.description} onChange={handleChange} placeholder="Description" required className="block w-full px-3 py-2 border border-gray-300 rounded-md"/>
          <select name="type" value={formData.type} onChange={handleChange} className="block w-full px-3 py-2 border border-gray-300 rounded-md">
            <option value="weekly">Weekly</option>
            <option value="monthly">Monthly</option>
            <option value="quarterly">Quarterly</option>
            <option value="yearly">Yearly</option>
          </select>
          <input name="targetDate" type="date" value={formData.targetDate} onChange={handleChange} required className="block w-full px-3 py-2 border border-gray-300 rounded-md"/>
          <div>
            <label>Progress: {formData.progress}%</label>
            <input name="progress" type="range" min="0" max="100" value={formData.progress} onChange={handleChange} className="w-full"/>
          </div>
          <div className="flex justify-end space-x-4 pt-4">
            <button type="button" onClick={onClose} className="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-lg">Cancel</button>
            <button type="submit" className="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg">{isEditing ? 'Save Changes' : 'Create Goal'}</button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default GoalModal;